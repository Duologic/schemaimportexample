{
   "$id": "http://grafana.com/schemas/grafana/x/dashboard.json",
   "$schema": "http://json-schema.org/draft-04/schema#",
   "components": {
      "schemas": {
         "AnnotationQuery": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "TODO docs\nFROM: AnnotationQuery in grafana-data/src/types/annotations.ts",
            "properties": {
               "builtIn": {
                  "default": 0,
                  "maximum": 255,
                  "minimum": 0,
                  "type": "integer"
               },
               "datasource": {
                  "description": "Datasource to use for annotation.",
                  "properties": {
                     "type": {
                        "type": "string"
                     },
                     "uid": {
                        "type": "string"
                     }
                  },
                  "type": "object"
               },
               "enable": {
                  "default": true,
                  "description": "Whether annotation is enabled.",
                  "type": "boolean"
               },
               "hide": {
                  "default": false,
                  "description": "Whether to hide annotation.",
                  "type": "boolean"
               },
               "iconColor": {
                  "description": "Annotation icon color.",
                  "type": "string"
               },
               "name": {
                  "description": "Name of annotation.",
                  "type": "string"
               },
               "rawQuery": {
                  "description": "Query for annotation data.",
                  "type": "string"
               },
               "showIn": {
                  "default": 0,
                  "maximum": 255,
                  "minimum": 0,
                  "type": "integer"
               },
               "target": {
                  "$ref": "#/components/schemas/AnnotationTarget"
               },
               "type": {
                  "default": "dashboard",
                  "type": "string"
               }
            },
            "required": [
               "datasource",
               "enable",
               "builtIn",
               "type",
               "showIn"
            ],
            "type": "object"
         },
         "AnnotationTarget": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "TODO docs",
            "properties": {
               "limit": {
                  "format": "int64",
                  "type": "integer"
               },
               "matchAny": {
                  "type": "boolean"
               },
               "tags": {
                  "items": {
                     "type": "string"
                  },
                  "type": "array"
               },
               "type": {
                  "type": "string"
               }
            },
            "required": [
               "limit",
               "matchAny",
               "tags",
               "type"
            ],
            "type": "object"
         },
         "DashboardCursorSync": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "default": 0,
            "description": "0 for no shared crosshair or tooltip (default).\n1 for shared crosshair.\n2 for shared crosshair AND shared tooltip.",
            "enum": [
               0,
               1,
               2
            ],
            "type": "integer"
         },
         "DashboardLink": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "FROM public/app/features/dashboard/state/DashboardModels.ts - ish\nTODO docs",
            "properties": {
               "asDropdown": {
                  "default": false,
                  "type": "boolean"
               },
               "icon": {
                  "type": "string"
               },
               "includeVars": {
                  "default": false,
                  "type": "boolean"
               },
               "keepTime": {
                  "default": false,
                  "type": "boolean"
               },
               "tags": {
                  "items": {
                     "type": "string"
                  },
                  "type": "array"
               },
               "targetBlank": {
                  "default": false,
                  "type": "boolean"
               },
               "title": {
                  "type": "string"
               },
               "tooltip": {
                  "type": "string"
               },
               "type": {
                  "$ref": "#/components/schemas/DashboardLinkType"
               },
               "url": {
                  "type": "string"
               }
            },
            "required": [
               "title",
               "type",
               "tags",
               "asDropdown",
               "targetBlank",
               "includeVars",
               "keepTime"
            ],
            "type": "object"
         },
         "DashboardLinkType": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "TODO docs",
            "enum": [
               "link",
               "dashboards"
            ],
            "type": "string"
         },
         "DynamicConfigValue": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
               "id": {
                  "default": "",
                  "type": "string"
               },
               "value": { }
            },
            "required": [
               "id"
            ],
            "type": "object"
         },
         "FieldColor": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "TODO docs",
            "properties": {
               "fixedColor": {
                  "description": "Stores the fixed color value if mode is fixed",
                  "type": "string"
               },
               "mode": {
                  "description": "The main color scheme mode",
                  "oneOf": [
                     {
                        "enum": [
                           "thresholds",
                           "palette-classic",
                           "palette-saturated",
                           "continuous-GrYlRd",
                           "fixed"
                        ]
                     },
                     { }
                  ],
                  "type": "string"
               },
               "seriesBy": {
                  "$ref": "#/components/schemas/FieldColorSeriesByMode"
               }
            },
            "required": [
               "mode"
            ],
            "type": "object"
         },
         "FieldColorModeId": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "TODO docs",
            "enum": [
               "thresholds",
               "palette-classic",
               "palette-saturated",
               "continuous-GrYlRd",
               "fixed"
            ],
            "type": "string"
         },
         "FieldColorSeriesByMode": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "TODO docs",
            "enum": [
               "min",
               "max",
               "last"
            ],
            "type": "string"
         },
         "FieldConfig": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
               "color": {
                  "$ref": "#/components/schemas/FieldColor"
               },
               "custom": {
                  "description": "custom is specified by the PanelFieldConfig field\nin panel plugin schemas.",
                  "type": "object"
               },
               "decimals": {
                  "description": "Significant digits (for display)",
                  "type": "number"
               },
               "description": {
                  "description": "Human readable field metadata",
                  "type": "string"
               },
               "displayName": {
                  "description": "The display value for this field.  This supports template variables blank is auto",
                  "type": "string"
               },
               "displayNameFromDS": {
                  "description": "This can be used by data sources that return and explicit naming structure for values and labels\nWhen this property is configured, this value is used rather than the default naming strategy.",
                  "type": "string"
               },
               "filterable": {
                  "description": "True if data source field supports ad-hoc filters",
                  "type": "boolean"
               },
               "links": {
                  "description": "The behavior when clicking on a result",
                  "items": { },
                  "type": "array"
               },
               "mappings": {
                  "description": "Convert input values into a display string",
                  "items": {
                     "$ref": "#/components/schemas/ValueMapping"
                  },
                  "type": "array"
               },
               "max": {
                  "type": "number"
               },
               "min": {
                  "type": "number"
               },
               "noValue": {
                  "description": "Alternative to empty string",
                  "type": "string"
               },
               "path": {
                  "description": "An explicit path to the field in the datasource.  When the frame meta includes a path,\nThis will default to `${frame.meta.path}/${field.name}\n\nWhen defined, this value can be used as an identifier within the datasource scope, and\nmay be used to update the results",
                  "type": "string"
               },
               "thresholds": {
                  "$ref": "#/components/schemas/ThresholdsConfig"
               },
               "unit": {
                  "description": "Numeric Options",
                  "type": "string"
               },
               "writeable": {
                  "description": "True if data source can write a value to the path.  Auth/authz are supported separately",
                  "type": "boolean"
               }
            },
            "type": "object"
         },
         "FieldConfigSource": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
               "defaults": {
                  "$ref": "#/components/schemas/FieldConfig"
               },
               "overrides": {
                  "items": {
                     "properties": {
                        "matcher": {
                           "$ref": "#/components/schemas/MatcherConfig"
                        },
                        "properties": {
                           "items": {
                              "$ref": "#/components/schemas/DynamicConfigValue"
                           },
                           "type": "array"
                        }
                     },
                     "required": [
                        "matcher",
                        "properties"
                     ],
                     "type": "object"
                  },
                  "type": "array"
               }
            },
            "required": [
               "defaults",
               "overrides"
            ],
            "type": "object"
         },
         "GraphPanel": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "Support for legacy graph and heatmap panels.",
            "properties": {
               "type": {
                  "enum": [
                     "graph"
                  ],
                  "type": "string"
               }
            },
            "required": [
               "type"
            ],
            "type": "object"
         },
         "GridPos": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
               "h": {
                  "default": 9,
                  "description": "Panel",
                  "exclusiveMinimum": true,
                  "maximum": 4294967295,
                  "minimum": 0,
                  "type": "integer"
               },
               "static": {
                  "description": "true if fixed",
                  "type": "boolean"
               },
               "w": {
                  "default": 12,
                  "description": "Panel",
                  "exclusiveMinimum": true,
                  "maximum": 24,
                  "minimum": 0,
                  "type": "integer"
               },
               "x": {
                  "default": 0,
                  "description": "Panel x",
                  "exclusiveMaximum": true,
                  "maximum": 24,
                  "minimum": 0,
                  "type": "integer"
               },
               "y": {
                  "default": 0,
                  "description": "Panel y",
                  "maximum": 4294967295,
                  "minimum": 0,
                  "type": "integer"
               }
            },
            "required": [
               "h",
               "w",
               "x",
               "y"
            ],
            "type": "object"
         },
         "HeatmapPanel": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
               "type": {
                  "enum": [
                     "heatmap"
                  ],
                  "type": "string"
               }
            },
            "required": [
               "type"
            ],
            "type": "object"
         },
         "MappingType": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "TODO docs",
            "enum": [
               "value",
               "range",
               "regex",
               "special"
            ],
            "type": "string"
         },
         "MatcherConfig": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
               "id": {
                  "default": "",
                  "type": "string"
               },
               "options": { }
            },
            "required": [
               "id"
            ],
            "type": "object"
         },
         "Panel": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "Dashboard panels. Panels are canonically defined inline\nbecause they share a version timeline with the dashboard\nschema; they do not evolve independently.",
            "properties": {
               "datasource": {
                  "description": "The datasource used in all targets.",
                  "properties": {
                     "type": {
                        "type": "string"
                     },
                     "uid": {
                        "type": "string"
                     }
                  },
                  "type": "object"
               },
               "description": {
                  "description": "Description.",
                  "type": "string"
               },
               "fieldConfig": {
                  "$ref": "#/components/schemas/FieldConfigSource"
               },
               "gridPos": {
                  "$ref": "#/components/schemas/GridPos"
               },
               "id": {
                  "description": "TODO docs",
                  "maximum": 4294967295,
                  "minimum": 0,
                  "type": "integer"
               },
               "interval": {
                  "description": "TODO docs\nTODO tighter constraint",
                  "type": "string"
               },
               "links": {
                  "description": "Panel links.\nTODO fill this out - seems there are a couple variants?",
                  "items": {
                     "$ref": "#/components/schemas/DashboardLink"
                  },
                  "type": "array"
               },
               "maxDataPoints": {
                  "description": "TODO docs",
                  "type": "number"
               },
               "options": {
                  "description": "options is specified by the PanelOptions field in panel\nplugin schemas.",
                  "type": "object"
               },
               "pluginVersion": {
                  "description": "FIXME this almost certainly has to be changed in favor of scuemata versions",
                  "type": "string"
               },
               "repeat": {
                  "description": "Name of template variable to repeat for.",
                  "type": "string"
               },
               "repeatDirection": {
                  "default": "h",
                  "description": "Direction to repeat in if 'repeat' is set.\n\"h\" for horizontal, \"v\" for vertical.",
                  "enum": [
                     "h",
                     "v"
                  ],
                  "type": "string"
               },
               "tags": {
                  "description": "TODO docs",
                  "items": {
                     "type": "string"
                  },
                  "type": "array"
               },
               "targets": {
                  "description": "TODO docs",
                  "items": {
                     "$ref": "#/components/schemas/Target"
                  },
                  "type": "array"
               },
               "thresholds": {
                  "description": "TODO docs - seems to be an old field from old dashboard alerts?",
                  "items": { },
                  "type": "array"
               },
               "timeFrom": {
                  "description": "TODO docs\nTODO tighter constraint",
                  "type": "string"
               },
               "timeRegions": {
                  "description": "TODO docs",
                  "items": { },
                  "type": "array"
               },
               "timeShift": {
                  "description": "TODO docs\nTODO tighter constraint",
                  "type": "string"
               },
               "title": {
                  "description": "Panel title.",
                  "type": "string"
               },
               "transformations": {
                  "items": {
                     "$ref": "#/components/schemas/Transformation"
                  },
                  "type": "array"
               },
               "transparent": {
                  "default": false,
                  "description": "Whether to display the panel without a background.",
                  "type": "boolean"
               },
               "type": {
                  "description": "The panel plugin type id. May not be empty.",
                  "minLength": 1,
                  "type": "string"
               }
            },
            "required": [
               "type",
               "transparent",
               "repeatDirection",
               "transformations",
               "options",
               "fieldConfig"
            ],
            "type": "object"
         },
         "RangeMap": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "TODO docs",
            "properties": {
               "options": {
                  "properties": {
                     "from": {
                        "description": "to and from are `number | null` in current ts, really not sure what to do",
                        "format": "double",
                        "type": "number"
                     },
                     "result": {
                        "$ref": "#/components/schemas/ValueMappingResult"
                     },
                     "to": {
                        "format": "double",
                        "type": "number"
                     }
                  },
                  "required": [
                     "from",
                     "to",
                     "result"
                  ],
                  "type": "object"
               },
               "type": {
                  "allOf": [
                     {
                        "$ref": "#/components/schemas/MappingType"
                     },
                     {
                        "enum": [
                           "range"
                        ]
                     }
                  ],
                  "type": "string"
               }
            },
            "required": [
               "type",
               "options"
            ],
            "type": "object"
         },
         "RegexMap": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "TODO docs",
            "properties": {
               "options": {
                  "properties": {
                     "pattern": {
                        "type": "string"
                     },
                     "result": {
                        "$ref": "#/components/schemas/ValueMappingResult"
                     }
                  },
                  "required": [
                     "pattern",
                     "result"
                  ],
                  "type": "object"
               },
               "type": {
                  "allOf": [
                     {
                        "$ref": "#/components/schemas/MappingType"
                     },
                     {
                        "enum": [
                           "regex"
                        ]
                     }
                  ],
                  "type": "string"
               }
            },
            "required": [
               "type",
               "options"
            ],
            "type": "object"
         },
         "RowPanel": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "Row panel",
            "properties": {
               "collapsed": {
                  "default": false,
                  "type": "boolean"
               },
               "datasource": {
                  "description": "Name of default datasource.",
                  "properties": {
                     "type": {
                        "type": "string"
                     },
                     "uid": {
                        "type": "string"
                     }
                  },
                  "type": "object"
               },
               "gridPos": {
                  "$ref": "#/components/schemas/GridPos"
               },
               "id": {
                  "maximum": 4294967295,
                  "minimum": 0,
                  "type": "integer"
               },
               "panels": {
                  "items": {
                     "oneOf": [
                        {
                           "$ref": "#/components/schemas/Panel"
                        },
                        {
                           "$ref": "#/components/schemas/GraphPanel"
                        },
                        {
                           "$ref": "#/components/schemas/HeatmapPanel"
                        }
                     ],
                     "type": "object"
                  },
                  "type": "array"
               },
               "repeat": {
                  "description": "Name of template variable to repeat for.",
                  "type": "string"
               },
               "title": {
                  "type": "string"
               },
               "type": {
                  "enum": [
                     "row"
                  ],
                  "type": "string"
               }
            },
            "required": [
               "type",
               "collapsed",
               "id",
               "panels"
            ],
            "type": "object"
         },
         "SpecialValueMap": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "TODO docs",
            "properties": {
               "options": {
                  "properties": {
                     "match": {
                        "enum": [
                           "true",
                           "false"
                        ],
                        "type": "string"
                     },
                     "pattern": {
                        "type": "string"
                     },
                     "result": {
                        "$ref": "#/components/schemas/ValueMappingResult"
                     }
                  },
                  "required": [
                     "match",
                     "pattern",
                     "result"
                  ],
                  "type": "object"
               },
               "type": {
                  "allOf": [
                     {
                        "$ref": "#/components/schemas/MappingType"
                     },
                     {
                        "enum": [
                           "special"
                        ]
                     }
                  ],
                  "type": "string"
               }
            },
            "required": [
               "type",
               "options"
            ],
            "type": "object"
         },
         "SpecialValueMatch": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "TODO docs",
            "enum": [
               "true",
               "false",
               "null",
               "nan",
               "null+nan",
               "empty"
            ],
            "type": "string"
         },
         "Target": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "Schema for panel targets is specified by datasource\nplugins. We use a placeholder definition, which the Go\nschema loader either left open/as-is with the Base\nvariant of the Dashboard and Panel families, or filled\nwith types derived from plugins in the Instance variant.\nWhen working directly from CUE, importers can extend this\ntype directly to achieve the same effect.",
            "type": "object"
         },
         "Threshold": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "TODO docs",
            "properties": {
               "color": {
                  "description": "TODO docs",
                  "type": "string"
               },
               "state": {
                  "description": "TODO docs\nTODO are the values here enumerable into a disjunction?\nSome seem to be listed in typescript comment",
                  "type": "string"
               },
               "value": {
                  "description": "TODO docs\nFIXME the corresponding typescript field is required/non-optional, but nulls currently appear here when serializing -Infinity to JSON",
                  "type": "number"
               }
            },
            "required": [
               "color"
            ],
            "type": "object"
         },
         "ThresholdsConfig": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
               "mode": {
                  "$ref": "#/components/schemas/ThresholdsMode"
               },
               "steps": {
                  "description": "Must be sorted by 'value', first value is always -Infinity",
                  "items": {
                     "$ref": "#/components/schemas/Threshold"
                  },
                  "type": "array"
               }
            },
            "required": [
               "mode",
               "steps"
            ],
            "type": "object"
         },
         "ThresholdsMode": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "enum": [
               "absolute",
               "percentage"
            ],
            "type": "string"
         },
         "Transformation": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "TODO docs\nFIXME this is extremely underspecfied; wasn't obvious which typescript types corresponded to it",
            "properties": {
               "id": {
                  "type": "string"
               },
               "options": {
                  "type": "object"
               }
            },
            "required": [
               "id",
               "options"
            ],
            "type": "object"
         },
         "ValueMap": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "TODO docs",
            "properties": {
               "options": {
                  "additionalProperties": {
                     "$ref": "#/components/schemas/ValueMappingResult"
                  },
                  "type": "object"
               },
               "type": {
                  "allOf": [
                     {
                        "$ref": "#/components/schemas/MappingType"
                     },
                     {
                        "enum": [
                           "value"
                        ]
                     }
                  ],
                  "type": "string"
               }
            },
            "required": [
               "type",
               "options"
            ],
            "type": "object"
         },
         "ValueMapping": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "TODO docs",
            "oneOf": [
               {
                  "$ref": "#/components/schemas/ValueMap"
               },
               {
                  "$ref": "#/components/schemas/RangeMap"
               },
               {
                  "$ref": "#/components/schemas/RegexMap"
               },
               {
                  "$ref": "#/components/schemas/SpecialValueMap"
               }
            ],
            "type": "object"
         },
         "ValueMappingResult": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "TODO docs",
            "properties": {
               "color": {
                  "type": "string"
               },
               "icon": {
                  "type": "string"
               },
               "index": {
                  "format": "int32",
                  "type": "integer"
               },
               "text": {
                  "type": "string"
               }
            },
            "type": "object"
         },
         "VariableModel": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "FROM: packages/grafana-data/src/types/templateVars.ts\nTODO docs\nTODO what about what's in public/app/features/types.ts?\nTODO there appear to be a lot of different kinds of [template] vars here? if so need a disjunction",
            "properties": {
               "label": {
                  "type": "string"
               },
               "name": {
                  "type": "string"
               },
               "type": {
                  "$ref": "#/components/schemas/VariableType"
               }
            },
            "required": [
               "type",
               "name"
            ],
            "type": "object"
         },
         "VariableType": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "description": "FROM: packages/grafana-data/src/types/templateVars.ts\nTODO docs\nTODO this implies some wider pattern/discriminated union, probably?",
            "enum": [
               "query",
               "adhoc",
               "constant",
               "datasource",
               "interval",
               "textbox",
               "custom",
               "system"
            ],
            "type": "string"
         }
      }
   },
   "properties": {
      "annotations": {
         "description": "TODO docs",
         "properties": {
            "list": {
               "items": {
                  "$ref": "#/components/schemas/AnnotationQuery"
               },
               "type": "array"
            }
         },
         "required": [
            "list"
         ],
         "type": "object"
      },
      "description": {
         "description": "Description of dashboard.",
         "type": "string"
      },
      "editable": {
         "default": true,
         "description": "Whether a dashboard is editable or not.",
         "type": "boolean"
      },
      "fiscalYearStartMonth": {
         "description": "TODO docs",
         "exclusiveMaximum": true,
         "maximum": 13,
         "minimum": 0,
         "type": "integer"
      },
      "gnetId": {
         "type": "string"
      },
      "graphTooltip": {
         "$ref": "#/components/schemas/DashboardCursorSync"
      },
      "id": {
         "description": "Unique numeric identifier for the dashboard.\nTODO must isolate or remove identifiers local to a Grafana instance...?",
         "format": "int64",
         "type": "integer"
      },
      "links": {
         "description": "TODO docs",
         "items": {
            "$ref": "#/components/schemas/DashboardLink"
         },
         "type": "array"
      },
      "liveNow": {
         "description": "TODO docs",
         "type": "boolean"
      },
      "panels": {
         "items": {
            "oneOf": [
               {
                  "$ref": "#/components/schemas/Panel"
               },
               {
                  "$ref": "#/components/schemas/RowPanel"
               },
               {
                  "$ref": "#/components/schemas/GraphPanel"
               },
               {
                  "$ref": "#/components/schemas/HeatmapPanel"
               },
               {
                  "$ref": "/schemas/grafana/x/gauge.json"
               }
            ],
            "type": "object"
         },
         "type": "array"
      },
      "refresh": {
         "description": "TODO docs",
         "oneOf": [
            {
               "enum": [
                  false
               ]
            },
            {
               "type": "string"
            }
         ]
      },
      "schemaVersion": {
         "default": 36,
         "description": "Version of the JSON schema, incremented each time a Grafana update brings\nchanges to said schema.\nTODO this is the existing schema numbering system. It will be replaced by Thema's themaVersion",
         "maximum": 65535,
         "minimum": 0,
         "type": "integer"
      },
      "style": {
         "default": "dark",
         "description": "Theme of dashboard.",
         "enum": [
            "dark",
            "light"
         ],
         "type": "string"
      },
      "tags": {
         "description": "Tags associated with dashboard.",
         "items": {
            "type": "string"
         },
         "type": "array"
      },
      "templating": {
         "description": "TODO docs",
         "properties": {
            "list": {
               "items": {
                  "$ref": "#/components/schemas/VariableModel"
               },
               "type": "array"
            }
         },
         "required": [
            "list"
         ],
         "type": "object"
      },
      "time": {
         "description": "Time range for dashboard, e.g. last 6 hours, last 7 days, etc",
         "properties": {
            "from": {
               "default": "now-6h",
               "type": "string"
            },
            "to": {
               "default": "now",
               "type": "string"
            }
         },
         "required": [
            "from",
            "to"
         ],
         "type": "object"
      },
      "timepicker": {
         "description": "TODO docs\nTODO this appears to be spread all over in the frontend. Concepts will likely need tidying in tandem with schema changes",
         "properties": {
            "collapse": {
               "default": false,
               "description": "Whether timepicker is collapsed or not.",
               "type": "boolean"
            },
            "enable": {
               "default": true,
               "description": "Whether timepicker is enabled or not.",
               "type": "boolean"
            },
            "hidden": {
               "default": false,
               "description": "Whether timepicker is visible or not.",
               "type": "boolean"
            },
            "refresh_intervals": {
               "default": [
                  "5s",
                  "10s",
                  "30s",
                  "1m",
                  "5m",
                  "15m",
                  "30m",
                  "1h",
                  "2h",
                  "1d"
               ],
               "description": "Selectable intervals for auto-refresh.",
               "items": {
                  "type": "string"
               },
               "type": "array"
            },
            "time_options": {
               "default": [
                  "5m",
                  "15m",
                  "1h",
                  "6h",
                  "12h",
                  "24h",
                  "2d",
                  "7d",
                  "30d"
               ],
               "description": "TODO docs",
               "items": {
                  "type": "string"
               },
               "type": "array"
            }
         },
         "required": [
            "collapse",
            "enable",
            "hidden",
            "refresh_intervals",
            "time_options"
         ],
         "type": "object"
      },
      "timezone": {
         "default": "browser",
         "description": "Timezone of dashboard,",
         "enum": [
            "browser",
            "utc",
            ""
         ],
         "type": "string"
      },
      "title": {
         "description": "Title of dashboard.",
         "type": "string"
      },
      "uid": {
         "description": "Unique dashboard identifier that can be generated by anyone. string (8-40)",
         "type": "string"
      },
      "version": {
         "description": "Version of the dashboard, incremented each time the dashboard is updated.",
         "maximum": 4294967295,
         "minimum": 0,
         "type": "integer"
      },
      "weekStart": {
         "description": "TODO docs",
         "type": "string"
      }
   },
   "required": [
      "style",
      "editable",
      "graphTooltip",
      "schemaVersion"
   ],
   "type": "object"
}
